name: Goose PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write
  contents: read

env:
  # Put your provider key in this repo/org secret
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  # Prevent Goose from touching a non-existent keyring on the runner
  GOOSE_DISABLE_KEYRING: "1"

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      # 1 — checkout & auth ----------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authenticate gh
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # 2 — install Goose ------------------------------------------------------
      - name: Install Goose CLI
        run: |
          mkdir -p "$HOME/.local/bin"
          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH="$HOME/.local/bin" bash
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Minimal Goose config
        run: |
          mkdir -p ~/.config/goose
          printf '%s\n%s\n%s\n' \
            'GOOSE_PROVIDER: openai' \
            'GOOSE_MODEL: gpt-4o' \
            'keyring: false' \
            > ~/.config/goose/config.yaml

      # 3 — get diff as JSON ---------------------------------------------------
      - name: Fetch PR diff JSON
        run: |
          gh pr view ${{ github.event.pull_request.number }} \
            --json files --jq '.files' > files.json

      # 4 — loop over hunks, ask Goose, post inline comments -------------------
      - name: Review hunks with Goose
        run: |
          set -e
          pr=${{ github.event.pull_request.number }}
          repo=${{ github.repository }}

          # Build per-hunk JSON: [{path, header, body}, …]
          jq -r '
            .[] | select(.patch != null) |
            {path: .path, patch: .patch} |
            (.patch | split("\n@@ ") | .[1:]) as $chunks |
            reduce ($chunks[]) as $c ([];
              . + [{
                path: .path,
                header: ("@@ " + ($c|split("\n")[0])),
                body:  ($c|split("\n")[1:] | join("\n"))
              }]
            )
          ' files.json > hunks.json

          # Iterate over each hunk
          jq -c '.[]' hunks.json | while read h; do
            path=$(echo "$h" | jq -r .path)
            header=$(echo "$h" | jq -r .header)
            body=$(echo "$h"   | jq -r .body)

            # extract starting new-file line number
            pos=$(echo "$header" | sed -E 's/.*\+([0-9]+).*/\1/')

            # build prompt & call Goose
            prompt=$(printf '%s\n' \
              'You are a senior engineer reviewing a pull request.' \
              '' \
              '**Task**' \
              'Comment on the diff hunk below with constructive feedback or praise.' \
              'Keep it friendly and concise (≤ 60 words).' \
              '' \
              'Diff:' \
              "$header" \
              "$body")

            suggestion=$(printf '%s\n' "$prompt" | goose run --quiet --instructions -)

            # skip empty output
            [ -z "$suggestion" ] && continue

            # post inline comment
            gh api -X POST \
              -f body="$suggestion" \
              -f path="$path" \
              -f line="$pos" \
              -f side="RIGHT" \
              "repos/$repo/pulls/$pr/comments"
          done
