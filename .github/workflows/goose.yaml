name: Goose PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write
  contents: read

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GOOSE_DISABLE_KEYRING: "1"

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------
      # 1.  Setup
      # --------------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authenticate gh
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Install Goose CLI
        run: |
          mkdir -p "$HOME/.local/bin"
          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH="$HOME/.local/bin" bash
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Minimal Goose config
        run: |
          mkdir -p ~/.config/goose
          cat > ~/.config/goose/config.yaml <<'EOF'
          GOOSE_PROVIDER: openai
          GOOSE_MODEL: o3
          keyring: false
          EOF

      # --------------------------------------------------
      # 2.  Pull diff with patch positions
      # --------------------------------------------------
      - name: Fetch PR diff JSON
        run: |
          gh pr view ${{ github.event.pull_request.number }} \
            --json files --jq '.files' > files.json

      # --------------------------------------------------
      # 3.  Loop over hunks, ask Goose, post inline review
      # --------------------------------------------------
      - name: Review hunks with Goose
        run: |
          set -e
          pr=${{ github.event.pull_request.number }}
          repo=${{ github.repository }}

          # Build per-hunk JSON with path / header / body.
          jq -r '
            .[] | select(.patch != null) |
            {path: .path, patch: .patch} |
            (.patch | split("\n@@ ") | .[1:]) as $chunks |
            reduce ($chunks[]) as $chunk (
              [];
              . + [{
                path: .path,
                header: ("@@ " + ($chunk|split("\n")[0])),
                body:  ($chunk|split("\n")[1:] | join("\n"))
              }]
            )
          ' files.json > hunks.json

          # Iterate and comment.
          jq -c '.[]' hunks.json | while read hunk; do
            path=$(echo "$hunk" | jq -r .path)
            header=$(echo "$hunk" | jq -r .header)
            body=$(echo "$hunk" | jq -r .body)

            # Extract starting new-file line number from the header.
            pos=$(echo "$header" | sed -n 's/.*+\\([0-9]\\+\\).*/\\1/p')

            # Ask Goose for feedback.
            suggestion=$(goose run --quiet --instructions - <<EOF
            You are a senior engineer reviewing a pull request.

            **Task**  
            Comment on the diff hunk below with constructive feedback or praise.  
            Keep it friendly and concise (â‰¤ 60 words).

            Diff:
            $header
            $body
            EOF
            )

            # Skip empty replies.
            [ -z "$suggestion" ] && continue

            # Post inline review comment.
            gh api \
              -X POST \
              -f body="$suggestion" \
              -f path="$path" \
              -f line="$pos" \
              -f side="RIGHT" \
              "repos/$repo/pulls/$pr/comments"
          done
