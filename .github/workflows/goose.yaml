name: Goose PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write   # create inline review comments
  contents: read

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # or your provider key
  GOOSE_DISABLE_KEYRING: "1"                      # skip desktop keyring

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------
      # 1.  Checkout and basic tooling
      # ------------------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # ------------------------------------------------------------------
      # 2.  Install and configure Goose
      # ------------------------------------------------------------------
      - name: Install Goose CLI
        run: |
          mkdir -p "$HOME/.local/bin"
          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH="$HOME/.local/bin" bash
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Minimal Goose config
        run: |
          mkdir -p ~/.config/goose
          printf '%s\n' \
            'GOOSE_PROVIDER: openai' \
            'GOOSE_MODEL: o3' \
            'keyring: false' \
            > ~/.config/goose/config.yaml

      # ------------------------------------------------------------------
      # 3.  Fetch PR files (includes .patch field)
      # ------------------------------------------------------------------
      - name: Fetch PR files
        run: |
          gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files?per_page=100" \
            > files.json

      # ------------------------------------------------------------------
      # 4.  Convert each patch into per-hunk JSON
      # ------------------------------------------------------------------
      - name: Build hunk list
        run: |
          jq -c '
            .[]
            | {path: .filename, patch: .patch}
            | select(.patch)                               # skip binaries
            | . as $f
            | ($f.patch
                | sub("\\\\ No newline at end of file$";"") # strip Git marker
                | split("@@ ")                              # split on hunk headers
                | .[1:]                                     # drop preamble
                | map({
                    path:   $f.path,
                    header: ("@@ " + (split("\n")[0])),
                    body:   (split("\n")[1:] | join("\n"))
                  })
              )
            | .[]
          ' files.json > hunks.json

      # ------------------------------------------------------------------
      # 5.  Loop over hunks → Goose → inline review comment
      # ------------------------------------------------------------------
      - name: Review hunks with Goose
        run: |
          set -e
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO_NAME=${{ github.repository }}

          jq -c . hunks.json | while read -r hunk; do
            FILE_PATH=$(echo "$hunk" | jq -r .path)
            HEADER=$(echo "$hunk"   | jq -r .header)
            BODY=$(echo "$hunk"     | jq -r .body)

            # first new-file line number for this hunk
            START_LINE=$(echo "$HEADER" | sed -E 's/.*\+([0-9]+).*/\1/')

            # build prompt
            PROMPT=$(printf '%s\n' \
              "You are a senior engineer reviewing a pull request." \
              "" \
              "**Task**" \
              "Comment on the diff hunk below with constructive feedback or praise." \
              "Keep it friendly and concise (≤ 60 words)." \
              "" \
              "Diff:" \
              "$HEADER" \
              "$BODY")

            # call Goose
            SUGGESTION=$(printf '%s\n' "$PROMPT" | goose run --quiet --instructions -)
            # skip if Goose returns nothing
            [ -z "$SUGGESTION" ] && continue

            # post inline review comment
            gh api -X POST \
              -f body="$SUGGESTION" \
              -f path="$FILE_PATH" \
              -f line="$START_LINE" \
              -f side="RIGHT" \
              "repos/$REPO_NAME/pulls/$PR_NUMBER/comments"
          done
