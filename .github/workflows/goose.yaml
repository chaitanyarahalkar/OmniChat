name: Goose Inline Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write   # create review comments
  contents: read

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GOOSE_DISABLE_KEYRING: "1"          # disable desktop key-ring look-ups

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────────────────────────────────────────
    # 1  Checkout & basic tooling
    # ──────────────────────────────────────────────────────────────
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - name: Ensure jq is present
      run: |
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y && sudo apt-get install -y jq
        fi

    - name: Authenticate gh
      run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    # ──────────────────────────────────────────────────────────────
    # 2  Install & configure Goose
    # ──────────────────────────────────────────────────────────────
    - name: Install Goose CLI
      run: |
        mkdir -p "$HOME/bin"
        curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
          | CONFIGURE=false INSTALL_PATH="$HOME/bin" bash
        echo "$HOME/bin" >> "$GITHUB_PATH"

    - name: Minimal Goose config
      run: |
        mkdir -p ~/.config/goose
        printf 'GOOSE_PROVIDER: openai\nGOOSE_MODEL: gpt-4o\nkeyring: false\n' \
          > ~/.config/goose/config.yaml

    # ──────────────────────────────────────────────────────────────
    # 3  Fetch PR file list (includes patch) & head commit SHA
    # ──────────────────────────────────────────────────────────────
    - name: Fetch PR metadata
      run: |
        gh api "/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files?per_page=100" > files.json
        gh api "/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" --jq .head.sha > head.txt

    # ──────────────────────────────────────────────────────────────
    # 4  Build hunks.json via embedded Python
    #     -> one JSON line per hunk with:
    #        path, commit_id, start_line, end_line, header, body
    # ──────────────────────────────────────────────────────────────
    - name: Build hunks.json
      run: |
        python <<'PY'
        import json, pathlib
        files   = json.load(open('files.json'))
        sha     = pathlib.Path('head.txt').read_text().strip()
        outlines = []
        for f in files:
            patch = f.get("patch") or ""
            lines = patch.splitlines()
            i = 0
            while i < len(lines):
                if lines[i].startswith("@@ "):
                    header = lines[i]
                    j = i + 1
                    while j < len(lines) and not lines[j].startswith("@@ "):
                        j += 1
                    # first real diff line is i+1, last is j-1
                    if j - i > 1:                      # ensure the hunk has content
                        outlines.append(json.dumps({
                            "path":       f["filename"],
                            "commit_id":  sha,
                            "start_line": i + 2,        # +2: one-based & skip @@ header
                            "end_line":   j,            # one-based
                            "header":     header,
                            "body":       "\n".join(lines[i+1:j])
                        }, separators=(',', ':')))
                    i = j
                else:
                    i += 1
        pathlib.Path("hunks.json").write_text("\n".join(outlines))
        PY

    # ──────────────────────────────────────────────────────────────
    # 5  Loop over hunks → Goose → post multi-line inline comment
    # ──────────────────────────────────────────────────────────────
    - name: Comment per hunk
      run: |
        PR=${{ github.event.pull_request.number }}
        REPO=${{ github.repository }}
        while IFS= read -r HUNK; do
          [ -z "$HUNK" ] && continue
          FILE_PATH=$(echo "$HUNK" | jq -r .path)
          START=$(echo      "$HUNK" | jq -r .start_line)
          END=$(echo        "$HUNK" | jq -r .end_line)
          SHA=$(echo        "$HUNK" | jq -r .commit_id)
          HDR=$(echo        "$HUNK" | jq -r .header)
          BODY=$(echo       "$HUNK" | jq -r .body)

          PROMPT=$(printf '%s\n' \
            'You are a senior engineer reviewing a pull request.' \
            '' \
            '**Task**  Comment on the diff hunk below with constructive feedback or praise (≤ 60 words).' \
            '' 'Diff:' "$HDR" "$BODY")

          COMMENT=$(printf '%s\n' "$PROMPT" | goose run --quiet --instructions -)
          [ -z "$COMMENT" ] && continue

          gh api -X POST \
            -f body="$COMMENT" \
            -f commit_id="$SHA" \
            -f path="$FILE_PATH" \
            -f start_line="$START" \
            -f start_side=RIGHT \
            -f line="$END" \
            -f side=RIGHT \
            "/repos/$REPO/pulls/$PR/comments"
        done < hunks.json
