name: Goose PR Reviewer (inline comments)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write
  contents: read

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GOOSE_DISABLE_KEYRING: "1"

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
    #-------------------------------------------------------------#
    # 0  Tooling (jq + gh auth)                                   #
    #-------------------------------------------------------------#
    - uses: actions/checkout@v4
      with: {fetch-depth: 0}

    - name: Install jq
      run: sudo apt-get update -y && sudo apt-get install -y jq

    - name: Authenticate gh
      run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    #-------------------------------------------------------------#
    # 1  Install & configure Goose                                #
    #-------------------------------------------------------------#
    - name: Install Goose CLI
      run: |
        mkdir -p "$HOME/.local/bin"
        curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
          | CONFIGURE=false INSTALL_PATH="$HOME/.local/bin" bash
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: Goose config
      run: |
        mkdir -p ~/.config/goose
        printf '%s\n' \
          'GOOSE_PROVIDER: openai' \
          'GOOSE_MODEL: gpt-4o' \
          'keyring: false' \
          > ~/.config/goose/config.yaml

    #-------------------------------------------------------------#
    # 2  Fetch patch-list (+ head SHA)                            #
    #-------------------------------------------------------------#
    - name: Fetch PR files (with patches)
      run: |
        gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files?per_page=100" \
          > files.json
        gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" --jq .head.sha \
          > head_sha.txt

    #-------------------------------------------------------------#
    # 3  Build hunk list – keep diff-relative position            #
    #-------------------------------------------------------------#
    - name: Build hunks.json
      run: |
        COMMIT_ID=$(cat head_sha.txt)
        jq -c --arg sha "$COMMIT_ID" '
          .[] | {path: .filename, patch: .patch}
          | select(.patch)
          | . as $f
          | ($f.patch | split("\n") | to_entries)    # lines with indices
          | map(select(.value|test("^@@ ")))         # hunk headers
          | .[] as $h                                # iterate headers
          | ($f.patch | split("\n")) as $lines
          | (($h.index + 1) to ( ($h2 := (index($lines; $h.index+1; "^@@ "))) // length ) ) as $range
          | {                                         # build one object
              path: $f.path,
              commit_id: $sha,
              header: ($lines[$h.index]),
              body: ($range | map($lines[.]) | join("\n")),
              position: $h.index + 1                  # diff-relative position
            }
        ' files.json > hunks.json

    #-------------------------------------------------------------#
    # 4  Loop → Goose → inline comment (commit_id + position)     #
    #-------------------------------------------------------------#
    - name: Review hunks with Goose
      run: |
        set -e
        PR=${{ github.event.pull_request.number }}
        REPO=${{ github.repository }}
        jq -c . hunks.json | while read -r h; do
          PATH=$(echo "$h" | jq -r .path)
          POSITION=$(echo "$h" | jq -r .position)
          COMMIT=$(echo "$h" | jq -r .commit_id)
          HEADER=$(echo "$h" | jq -r .header)
          BODY=$(echo "$h" | jq -r .body)

          PROMPT=$(printf '%s\n' \
            "You are a senior engineer reviewing a pull request." \
            "" \
            "Give constructive feedback on this diff hunk (≤60 words)." \
            "" \
            "Diff:" "$HEADER" "$BODY")

          COMMENT=$(printf '%s\n' "$PROMPT" | goose run --quiet --instructions -)
          [ -z "$COMMENT" ] && continue

          gh api -X POST \
            -f body="$COMMENT" \
            -f commit_id="$COMMIT" \
            -f path="$PATH" \
            -f position="$POSITION" \
            "repos/$REPO/pulls/$PR/comments"
        done
